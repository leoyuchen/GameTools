原始资料：
steve：
原文：DSLink 的格式（猜测）：总容量：512K+8K
如果是 4Kb 或 64Kb 的话，放在最后 8K 的位置，512Kb, 2Mb, 4Mb 的均放在前面的 512K 的位置，无其它数据
标准的 DSLINK 的存档是用了前 512K 的话，后 8K 为 FF；用了后面 8K 的话，前面 512K 为 FF 的。
为了兼容性考量，最好和 DSLINK 官方一样！
结论，DSLink格式的原始存档为EEPROM时，前512k无数据，用ff填充。后8k为存档区。

lyman：
原文：建议开放源代码，一方面可以依靠sourceforge或者googlecode，让自己的成果有一个像样的归宿，二是可以吸收大家的力量共同完善之。我的walkbook项目可供参考，虽然没什么用户，但是有主页，有论坛，有wiki，看起来还是想那么回事的... http://code.google.com/p/walkbook/

夏雪宜：
结论：	ez5：同ak、sc ds one相同，5种存档大小，手动选择。

felix 
内容: SC转DSX:
1. 把256KB的.SAV用GZ压缩.
2. 在压缩後的档案前加上24个byte的0x00.(0x18)
DSX转SC:
1. 删除档案最前的24个byte.
2. 用GZ解压缩.
G6/EZ4:
跟SC一样
.DUC/.DST转SC: (这两个是ActionReplay金手指的档案)
1. 删除档案最前的500个byte.(0x1F4)
2. 在档案的後面加上0x00直至档案的大小是256K.

★月下雪影★ 
希望LZ研究一下0305右脑达人找茬博物馆右脑达人的存档,因为这个存档有一些特殊,不能直接继承使用
关于这个存档的继承我做了几个测试,EZ5的存档给R4使用,发现是记录格式破坏,不能使用,EZ4的给EZ5使用是读取不了,也就是说进入游戏之后发现存档是新存档,不是以前玩过的存档,其余的烧录卡间也存在不能直接继承的缘故
还有就是对于EZ5的存档读取做过一次兼容性实验,发现能够通过直接改后缀名识别所有的存档,不用通过转换软件,我对这个比较感兴趣,不知道LZ有没有EZ5,可以研究一下EZ5的存档识别机制么 
至于存档EZ5可以继承DSLINK的,但是DS-X的我没有发现有存档的放出,所以一直没做过实验

7upshd 
强！ 希望楼主在下个版本中，更新一下DSGBA的OEM产品，N-card、DS FIRE LINK 之类
都是2Mbit存档 

M3 DS Real的GBA游戏即时存档文件(*.is0)大小为576K。
官方“*仅SLOT-2端口M3系列的GBA游戏存档DAT文件可提取出其内部包含的GBA游戏即时存档数据。”这个功能暂时还没实现。

幻之皮卡丘（原创）
[技术]关于NO$GBA的存档压缩
NO$GBA的存档使用的压缩方式很简单，就是针对NDS存档具有大量重复数据的特点而设计的。这里只说解压缩文件的方法。首先，前31字节是“NocashGbaBackupMediaSavDataFile”的ASCII码，是NO$GBA存档的标志特征。包含这31字节在内的前80字节都是NO$GBA加的识别数据。从第81字节也就是0x50开始，遵从以下转换规律：
1.如果该字节ByteA的数据为&H81~&HFF，那么解压缩时这个字节之后的第一个字节ByteB将被重复（ByteA-&H80）次。例如0“85 00 ”，那么解压缩后应为“00 00 00 00 00”。然后ByteB不再进行转换，转换ByteB后的下一字节。
2.如果该字节ByteA的数据为&H80，那么接下来的三个字节（ByteB，IntC）解压缩后将会把ByteB重复IntC次，然后跳过ByteB、IntC转换下一字节。例如“80 FF FF FF”将转换成65535个“FF” 
3.如果该字节ByteA的数据为&H01~&H7F，那么解压缩时这个字节之后的ByteA个字节将不被转换，直接输出。例如“85 00 03 04 AF 5B”，那么解压缩后应为“00 00 00 00 00 04 AF 5B”。然后转换ByteA之后的第ByteA+1字节。
4.如果该字节ByteA的数据为&H00，则结束转换。剩下的数据为文件尾，好像通常是“LIFE”“LIFF”“STOP”什么的东西。
然后，转换出来的文件就是可以在nds上读取的标准存档了。（当然也可以用修改器修改）

 yeyezai 
实验小白鼠
NO$GBA的存档格式会移除所有的00和FF字节，然后以两个字节数据表明移除00或FF字节以及其数量，同时在每一组非00或FF数据前会添加非00 或FF数据的长度，因此会形成一个2+1字节的数据。存档的数据从第六行开始，前5行是NO$GBA自用的存档类型数据，之后第一个数据表明文件开头第一组非00数据的长度，之后会重复出现类似8X XX XX的数据，其中8是00或FF数据计数标志，后面第一个X代表数据长度，同时整个数据需要占用三个字节，所以最小计数是3，避免浪费，因此最小起始值是十进制131，也就是十六进制83。不过不是很轻触如果其他数据出现了大量的重复会不会也被替换，如果会的话，第一位就是数据长度计数，第二位是重复数据类型，之后每组非重复数据前添加数据长度信息  
如果一段在AK中的存档数据 
FF FF AB FF 00 00 00 00 AA AA 00 00 02 01
在NO$GBA中
04 FF FF AB FF 84 00 06 AA AA 00 00 02 01
如果中间的00数据超过16位就回向前进一位

EZ5的存档系统是硬件Flash芯片，在游戏中进行存档首先是存在烧录卡里的芯片里，然后下次开机再强制保存进TF卡内，这块芯片是4M大小，大家知道NDS的存档类型截止到目前为止有4k、64k、512k、2M、4M这几种，之前在Acekard的评测中提到了，Acekard的存档用了三块芯片：4k、512K、4M，这三块芯片就保证了完全仿正版的设计，EZ5和Acekard同样是硬件存档，不过EZ5只用了一块4M的存档芯片，虽然说从硬件上能够实现原生Flash写入的只有2M和4M这两种类型，但是4k、64k、512k这三种存档类型都是通过CPLD模拟EEPROM来实现，之后下次开机再保存到TF卡里面，在进入游戏前，再由TF卡写入到存档芯片中。由于EZ5是直接支持Clean Rom，不对Rom打补丁，也不对存档打补丁，所以对于新游戏而言，它和Acekard、SC DS同样都面临存档类型需要手动选择的问题。

由于NO$GBA模拟器存档不能被Pokesav直接识别，因此需要进行转换。
首先，在NO$GBA模拟器中保存的（.SAV）存档是压缩并且加密过的，大小只有100多KB，要取消加密，也就是转变为正常存档就可以转换。
然后，开始：在NO$GBA模拟器的目录中找到“NO$GBA.INI”文件。打开后，找到“SAV/SNA File Format == Compressed”一行，把“Compressed”改为“Uncompressed”，保存、退出。
第三，进入游戏进行存档，退出，会发现存档已经变为520KB，还不是我们想要的512KB。因此要使用No$GBA存档转换器对其进行转换。转换之后即可用pokesav进行存档修改。

先关闭No$GBA，然后在No$GBA模拟器的文件夹中找到“NO$GBA.INI”文件。打开后，将NO$GBA.INI文件中的"SAV/SNA File Format == Compressed"改为"SAV/SNA File Format == Raw",就是把最后的"Compressed"改为"Raw" 这里一定要注意“大小写”与保留双等号后的“空格”!修改完以后,保存,退出。
(如果，系统设置为隐藏文件后缀,那么文件名就是NO$GBA,没有后缀.INI ) 
注意：如果改成Raw后无法读取存档，那么请再改成Uncompressed试试。

DSLink官方存档转换软件工具分析：
1、存档导入：
a、512K other->DSLink(520K)
	512k -> 512k
	512k的前8k -> 513-520k
b、256K other->DSLink(520K)
	256k -> 256k
	“0xFF” -> 257-512K
	256k的前8k -> 513-520k
存档导出：
a、FLASH 2M -> OTHER(256K)
	256k -> 256k
b、FLASH 4M -> OTHER(512K)
	512k -> 512k
c、EEPROM -> OTHER(256K)
	513-520k -> 8k
	“FF” -> 9-256K

部分官方存档转换工具的缺点：
1、M3：只支持256k的标准存档的导入、导出；对512k的口袋妖怪的存档支持不好。
2、DSLink：导出时要手动选择导出类型；无法导入512b的标准存档格式。
3、R4：无法将R4的存档导成其他存档格式（尽管有时候不需要转换）。

