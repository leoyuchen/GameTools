部分B类、C类存档格式说明：

1、M3：B类存档，存档大小为257k和513k，其实就是A类的256k和512k存档加上1k的rom对应信息。到现在为止，513k的存档只有《口袋妖怪－珍珠/钻石/白金》。

2、DSLINK：B类存档，存档大小为520k，其实就是512k的标准存档加上8k的额外数据，总容量：512K+8K。如果是512b(4K bit)或8k(64K bit)的话，放在最后8K的位置，前面512K为0xFF；64K(512K bit)、256K(2M bit)、512K(4M bit)的均放在前面的512K的位置，后8K为0xFF。

3、DSX：C类存档，存档大小很小，一般为2-8k。（DS-Xploder | Gameshark for Nintendo DS）
存档文件后缀为gds，以“DSXS”开头，前0x100(0x00-0xff)字节是文件头，其中0x08-0x0a是Gzip压缩部分的体积，高位在后，低位在前（比整个gds文件体积少0x100字节）。从0x100开始是以GZip格式压缩的存档文件，压缩前文件有512B,8K,32K,64K,256K,512K共六种。
0x0b数据: 512B：0x12,8K：0x11,32K：0x12,64K：0x12,256K：0x20,512K：0x21

4、Action Replay Max DS
Action Replay Max DS有三种存档格式：(这是ActionReplay金手指的档案)
A、duc格式：
duc格式，体积262644，B类存档，转成其他格式的方法：去掉最前面的500(0x1f4)字节
b、dst格式：
C类存档，为自由格式压缩文件。在压缩后文件中，从0x1fc开始，把未压缩数据每8K为一个分块，分别压缩，每个分块结构如下：先有8个字节前导，然后的一个字节是标志位nn，再往后的数据则以标志位nn为标志，nn xx 00 表示xx+1个“00”，其它字节照抄。
分块的个数存在0x1f8位置。
8字节前导结构：00 00 20 00 00 00 xx xx，其中xx xx是本分块压缩后的字节数，高位在前，低位在后，并且计数时包含标志位nn。
C、dss格式：
与duc格式相同。

5. Gameshark GBA snapshot(*.sps)存档文件
B类存档：
byte spsMarker[] = {0x30,0x1,0,0,0,0,0,0,0};	其中spsMarker[0]可能为0x30或0x37（VBA模拟器数据）。
紧接着spsMarker的数据就是存档数据，整个文件的最后4字节无用。

6、EzIV存档
B类存档，体积为272K（278528Byte），前256K为存档数据。

7、M3 DS Real的GBA游戏即时存档文件(*.is0)大小为576K。
官方“*仅SLOT-2端口M3系列的GBA游戏存档DAT文件可提取出其内部包含的GBA游戏即时存档数据。”
这个功能本软件暂时还没实现。

8、所有512K的口袋妖怪存档
DS上面的口袋妖怪512K存档是分为两个256K部分的，每256K部分都记录一个存档次数，次数大的为新存档，
存档次数为4字节数据，低位在前，高位在后，位置在：
珍珠\钻石:	1：0xc0f0-0xc0f3	2：0x4c0f0-0x4c0f3	
白金:		1：0xcf1c-0xcf1f	2：0x4cf1c-0x4cf1f	


NO$GBA存档研究

NO$GBA的存档有三种模式Compressed、Uncompressed、Raw，其中Compressed为默认模式；
1、Compressed模式：
带有附加的 NO$GBA信息的压缩存档格式，体积<200k。0x00-0x1e为字符串“NocashGbaBackupMediaSavDataFile”，0x40-0x43为“SRAM”，0x44为"01"，0x4e为"08"，0x4f为"00"，且0x24、0x28、0x29、0x48、0x49、0x4a对于不同的游戏是不同的，从地址0x50开始为使用特有的压缩格式压缩的存档数据。
2、Uncompressed模式：
带有附加的 NO$GBA信息的标准存档格式。0x00-0x1e为字符串“NocashGbaBackupMediaSavDataFile”，0x40-0x43为“SRAM”，0x44为"00"、0x4a为"08"、0x4b为"00"，且0x24、0x26、0x28、0x29对于不同的游戏是不同的，从地址0x4c开始为标准存档数据，共512k，从地址0x8004c开始是未知数据，地址0x8004c-0x8004f为“LIFE”，地址0x82058-0x82055b为“LIFF”，地址0x82164-0x82166为“STOP”,整个文件最后的一个字节地址为0x8216f。文件共0x82170（532848字节）。（520K+368B）
3、Raw模式
标准的512k存档格式，无附加信息。
另外，同一个游戏在Compressed模式和Uncompressed模式中的0x00-0x43是相同的

修改NO$GBA存档模式的方法：
关于NO$GBA存档的转换
要把NO$GBA的存档转为其他格式，请现关闭NO$GBA模拟器，在NO$GBA模拟器的目录中找到“NO$GBA.INI”文件。打开后，找到“SAV/SNA File Format == ********”一行。
把后面的“********”就是当前的存档模式，现在改成“Raw”（无引号），注意大小写和双等号后的空格，保存,退出。这样NO$GBA产生的存档就是标准的512K存档，可以给存档体积为固定512K的刻录卡直接使用了，其他刻录卡也可以通过本软件转换后使用。
如果改成“Raw”后，模拟器没办法存档，请改成“Uncompressed”，这样产生的存档必须通过本软件转换后才能给其他烧录卡使用。
(如果，系统设置为隐藏文件后缀,那么文件名就是NO$GBA,没有后缀.INI ) 

关于NO$GBA的Compressed模式存档压缩格式
NO$GBA的存档使用的压缩方式很简单，就是针对NDS存档具有大量重复数据的特点而设计的。这里只说解压缩文件的方法。首先，前31字节是“NocashGbaBackupMediaSavDataFile”的ASCII码，是NO$GBA存档的标志特征。包含这31字节在内的前80字节都是NO$GBA加的识别数据。从第81字节也就是0x50开始，遵从以下转换规律：
1.如果该字节ByteA的数据为&H81~&HFF，那么解压缩时这个字节之后的第一个字节ByteB将被重复（ByteA-&H80）次。例如0“85 00 ”，那么解压缩后应为“00 00 00 00 00”。然后ByteB不再进行转换，转换ByteB后的下一字节。
2.如果该字节ByteA的数据为&H80，那么接下来的三个字节（ByteB，IntC）解压缩后将会把ByteB重复IntC次，然后跳过ByteB、IntC转换下一字节。例如“80 FF FF FF”将转换成65535个“FF” 
3.如果该字节ByteA的数据为&H01~&H7F，那么解压缩时这个字节之后的ByteA个字节将不被转换，直接输出。例如“85 00 03 04 AF 5B”，那么解压缩后应为“00 00 00 00 00 04 AF 5B”。然后转换ByteA之后的第ByteA+1字节。
4.如果该字节ByteA的数据为&H00，则结束转换。剩下的数据为文件尾，好像通常是“LIFE”“LIFF”“STOP”什么的东西。
然后，转换出来的文件就是可以在nds上读取的标准存档了。（当然也可以用修改器修改）

NO$GBA的存档格式会移除所有的00和FF字节，然后以两个字节数据表明移除00或FF字节以及其数量，同时在每一组非00或FF数据前会添加非00 或FF数据的长度，因此会形成一个2+1字节的数据。存档的数据从第六行开始，前5行是NO$GBA自用的存档类型数据，之后第一个数据表明文件开头第一组非00数据的长度，之后会重复出现类似8X XX XX的数据，其中8是00或FF数据计数标志，后面第一个X代表数据长度，同时整个数据需要占用三个字节，所以最小计数是3，避免浪费，因此最小起始值是十进制131，也就是十六进制83。不过不是很轻触如果其他数据出现了大量的重复会不会也被替换，如果会的话，第一位就是数据长度计数，第二位是重复数据类型，之后每组非重复数据前添加数据长度信息  
如果一段在AK中的存档数据 
FF FF AB FF 00 00 00 00 AA AA 00 00 02 01
在NO$GBA中
04 FF FF AB FF 84 00 06 AA AA 00 00 02 01
如果中间的00数据超过16位就回向前进一位


模拟器DeSmuME
(2017-1-22~2017-1-23)
分即时存档和正常存档
即时存档后缀为.dst，暂时无法分析
正常存档后缀为.dsv，B类存档，区分存档大小，且比正常存档在结尾多出122字节，内容为：“|<--Snip above here to create a raw sav by excluding this DeSmuME savedata footer:”+ 24未知 +“|-DESMUME SAVE-|”
